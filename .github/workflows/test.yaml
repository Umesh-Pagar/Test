name: Run Azure Login with OpenID Connect
on:
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read
      
jobs: 
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'dev' }}
    defaults:
      run:
        shell: bash
        working-directory: ./wrapper
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1
      with:
        terraform_wrapper: false

    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      env:
        ARM_USE_OIDC: true
      run: terraform init -backend-config="../environments/prod/backend.json"

    # Run a terraform plan
    - name: Terraform Plan
      env:
        ARM_USE_OIDC: true
      run: terraform plan -var-file="../environments/prod/prod.tfvars" -out tfplan -no-color

    # Create text file with Terraform Plan
    - name: Create text plan
      run: |
        terraform show -no-color tfplan >> tfplan.txt

    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      id: upload-text-plan
      with:
        name: tfplan
        path: ./wrapper/tfplan.txt
        overwrite: true
        retention-days: 7

    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

        # Check the length of the plan
        PLAN_LENGTH=$(echo "$TERRAFORM_PLAN" | wc -c)
        echo "plan_length=$PLAN_LENGTH" >> $GITHUB_ENV

    # If this is a PR post the changes
    - name: Push Terraform Output to PR Comment
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        PLAN_LENGTH: ${{ env.plan_length }}
      with:
        github-token: ${{ secrets.IAC_PLATFORM_PAT_SECRET }}
        script: |
          const planLength = parseInt(process.env.PLAN_LENGTH, 10);
          const maxCommentLength = 65536; // GitHub comment length limit

          if (planLength > maxCommentLength) {
            const body = `Terraform plan URL: ${{ steps.upload-text-plan.outputs.artifact-url }}`;
          } else {
            body = `${process.env.SUMMARY}`;
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

